<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9
                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">

    <changeSet id="Add Auditor to Search Field" author="v.kostyukevich">
        <sql endDelimiter="#">

            DROP procedure IF EXISTS `SELECT_USERS`;

            #

            CREATE PROCEDURE `SELECT_USERS`(
            IN request_id VARCHAR(10),
            IN request_first_name VARCHAR(100),
            IN request_second_name VARCHAR(100),
            IN request_user_name VARCHAR(100),
            IN request_unit_coordinator VARCHAR(11),
            IN request_account_manager VARCHAR(11),
            IN request_auditor VARCHAR(11)
            )
            BEGIN
            SELECT
            users.*,
            session_code,
            sessions.created as session_created
            FROM users as users
            LEFT JOIN user_sessions as sessions
            ON users.last_session_id = sessions.id
            WHERE (request_id= '' OR users.id=request_id)
            AND (request_first_name= '' OR first_name=request_first_name)
            AND (request_second_name = '' OR second_name=request_second_name)
            AND (request_user_name = '' OR user_name=request_user_name)
            AND (request_unit_coordinator ='' OR request_unit_coordinator=unit_coordinator)
            AND (request_account_manager ='' OR request_account_manager=account_manager)
            AND (request_auditor ='' OR request_auditor=auditor)
            ;
            END

        </sql>
        <rollback>
            DROP procedure IF EXISTS `SELECT_USERS`;

            #

            CREATE PROCEDURE `SELECT_USERS`(
            IN request_id VARCHAR(10),
            IN request_first_name VARCHAR(100),
            IN request_second_name VARCHAR(100),
            IN request_user_name VARCHAR(100),
            IN request_unit_coordinator VARCHAR(11),
            IN request_account_manager VARCHAR(11)
            )
            BEGIN
            SELECT
            users.*,
            session_code,
            sessions.created as session_created
            FROM users as users
            LEFT JOIN user_sessions as sessions
            ON users.last_session_id = sessions.id
            WHERE (request_id= '' OR users.id=request_id)
            AND (request_first_name= '' OR first_name=request_first_name)
            AND (request_second_name = '' OR second_name=request_second_name)
            AND (request_user_name = '' OR user_name=request_user_name)
            AND (request_unit_coordinator ='' OR request_unit_coordinator=unit_coordinator)
            AND (request_account_manager ='' OR request_account_manager=account_manager)
            ;
            END
        </rollback>
    </changeSet>


    <changeSet id="Add Default Email Domain Setting To email Settings" author="v.kostyukevich">
        <sql endDelimiter="#">
            ALTER TABLE `email_settings`
            ADD COLUMN `default_email_pattern` VARCHAR(50) NULL AFTER `use_auth`;
        </sql>
        <rollback>
            ALTER TABLE `email_settings`
            DROP COLUMN `default_email_pattern`;
        </rollback>
    </changeSet>

    <changeSet id="Add Default Email Domain Setting To INSERT_EMAIL_SETTINGS" author="v.kostyukevich">
        <sql endDelimiter="#">

            DROP procedure IF EXISTS `INSERT_EMAIL_SETTINGS`;

            #

            CREATE PROCEDURE `INSERT_EMAIL_SETTINGS`(
            IN request_id VARCHAR(11),
            IN request_host VARCHAR(100),
            IN request_port varchar(4),
            IN request_user VARCHAR(100),
            IN request_from_email VARCHAR(100),
            IN request_password VARCHAR(1000),
            IN request_enabled varchar(1),
            IN request_use_auth varchar(1),
            IN request_default_email_pattern varchar(50))
            BEGIN
            INSERT INTO email_settings (id, host, user, password, enabled, from_email, port, use_auth, default_email_pattern)
            VALUES (
            request_id,
            request_host,
            request_user,
            request_password,
            request_enabled,
            request_from_email,
            request_port,
            request_use_auth,
            request_default_email_pattern
            )
            ON DUPLICATE KEY UPDATE
            host= IF(request_host = '', host, request_host),
            user = IF(request_user = '', user, request_user),
            password = IF(request_password = '', password, request_password),
            enabled = IF(request_enabled = '', enabled, request_enabled),
            from_email = IF(request_from_email = '', from_email, request_from_email),
            port = IF(request_port = '', port, request_port),
            use_auth = IF (request_use_auth='', use_auth, request_use_auth),
            default_email_pattern = request_default_email_pattern
            ;

            SET @insert_id = IF(request_id = '', (SELECT LAST_INSERT_ID()), request_id);
            SELECT * from email_settings where id = @insert_id;
            END

        </sql>
        <rollback>
            DROP procedure IF EXISTS `INSERT_EMAIL_SETTINGS`;

            #

            CREATE PROCEDURE `INSERT_EMAIL_SETTINGS`(
            IN request_id VARCHAR(11),
            IN request_host VARCHAR(100),
            IN request_port varchar(4),
            IN request_user VARCHAR(100),
            IN request_from_email VARCHAR(100),
            IN request_password VARCHAR(1000),
            IN request_enabled varchar(1),
            IN request_use_auth varchar(1))
            BEGIN
            INSERT INTO email_settings (id, host, user, password, enabled, from_email, port, use_auth)
            VALUES (
            request_id,
            request_host,
            request_user,
            request_password,
            request_enabled,
            request_from_email,
            request_port,
            request_use_auth
            )
            ON DUPLICATE KEY UPDATE
            host= IF(request_host = '', host, request_host),
            user = IF(request_user = '', user, request_user),
            password = IF(request_password = '', password, request_password),
            enabled = IF(request_enabled = '', enabled, request_enabled),
            from_email = IF(request_from_email = '', from_email, request_from_email),
            port = IF(request_port = '', port, request_port),
            use_auth = IF (request_use_auth='', use_auth, request_use_auth)
            ;

            SET @insert_id = IF(request_id = '', (SELECT LAST_INSERT_ID()), request_id);
            SELECT * from email_settings where id = @insert_id;
            END
        </rollback>
    </changeSet>

    <changeSet id="Add fail reason contains search" author="v.kostyukevich">
        <sql endDelimiter="#">

            DROP procedure IF EXISTS `SELECT_TEST_RESULT`;

            #

            CREATE PROCEDURE `SELECT_TEST_RESULT`(
            IN request_project_id VARCHAR(10),
            IN request_id VARCHAR(10),
            IN request_test_id VARCHAR(10),
            IN request_final_result_id VARCHAR(10),
            IN request_test_run_id VARCHAR(10),
            IN request_test_resolution_id VARCHAR(10),
            IN request_debug VARCHAR(1),
            IN request_fail_reason VARCHAR(150),
            In request_limit INT(10)
            )
            BEGIN
            SELECT * FROM test_results as res
            WHERE (request_id = '' OR id=request_id)
            AND (request_project_id = '' OR project_id = request_project_id)
            AND (request_test_id = '' OR test_id=request_test_id)
            AND (request_final_result_id = '' OR final_result_id=request_final_result_id)
            AND (request_test_run_id = '' OR test_run_id=request_test_run_id)
            AND (request_test_resolution_id = '' OR test_resolution_id=request_test_resolution_id)
            AND (request_debug = '' OR debug=request_debug)
            AND (request_fail_reason = '' OR INSTR(fail_reason, request_fail_reason) > 0)
            ORDER BY start_date DESC
            LIMIT request_limit
            ;
            END

        </sql>
        <rollback>
            DROP procedure IF EXISTS `SELECT_TEST_RESULT`;

            #

            CREATE PROCEDURE `SELECT_TEST_RESULT`(
            IN request_project_id VARCHAR(10),
            IN request_id VARCHAR(10),
            IN request_test_id VARCHAR(10),
            IN request_final_result_id VARCHAR(10),
            IN request_test_run_id VARCHAR(10),
            IN request_test_resolution_id VARCHAR(10),
            IN request_debug VARCHAR(1),
            IN request_fail_reason VARCHAR(150),
            In request_limit INT(10)
            )
            BEGIN
            SELECT * FROM test_results as res
            WHERE (request_id = '' OR id=request_id)
            AND (request_project_id = '' OR project_id = request_project_id)
            AND (request_test_id = '' OR test_id=request_test_id)
            AND (request_final_result_id = '' OR final_result_id=request_final_result_id)
            AND (request_test_run_id = '' OR test_run_id=request_test_run_id)
            AND (request_test_resolution_id = '' OR test_resolution_id=request_test_resolution_id)
            AND (request_debug = '' OR debug=request_debug)
            AND (request_fail_reason = '' OR INSTR(fail_reason, request_fail_reason) > 0)
            ORDER BY start_date DESC
            LIMIT request_limit
            ;
            END
        </rollback>
    </changeSet>

    <changeSet id="start_date_idx for test result" author="v.kostyukevich">
        <sql>
            ALTER TABLE `test_results`
            ADD INDEX `start_date_idx` (`start_date` ASC);
        </sql>
    </changeSet>

    <changeSet id="add regex search for fail reason" author="v.kostyukevich">
        <sql endDelimiter="#">
            DROP procedure IF EXISTS `SELECT_TEST_RESULT`;

            #

            CREATE PROCEDURE `SELECT_TEST_RESULT`(
            IN request_project_id VARCHAR(10),
            IN request_id VARCHAR(10),
            IN request_test_id VARCHAR(10),
            IN request_final_result_id VARCHAR(10),
            IN request_test_run_id VARCHAR(10),
            IN request_test_resolution_id VARCHAR(10),
            IN request_debug VARCHAR(1),
            IN request_fail_reason VARCHAR(150),
            IN request_fail_reason_regex VARCHAR(500),
            In request_limit INT(10)
            )
            BEGIN
            IF(request_fail_reason_regex = '') THEN SET request_fail_reason_regex = '.*';
            END IF;

            SELECT * FROM test_results as res
            WHERE (
            request_id = '' OR id=request_id)
            AND (request_project_id = '' OR project_id = request_project_id)
            AND (request_test_id = '' OR test_id=request_test_id)
            AND (request_final_result_id = '' OR final_result_id=request_final_result_id)
            AND (request_test_run_id = '' OR test_run_id=request_test_run_id)
            AND (request_test_resolution_id = '' OR test_resolution_id=request_test_resolution_id)
            AND (request_debug = '' OR debug=request_debug)
            AND (request_fail_reason = '' OR INSTR(fail_reason, request_fail_reason) > 0)
            AND IFNULL(fail_reason, '') REGEXP request_fail_reason_regex
            ORDER BY start_date DESC
            LIMIT request_limit
            ;
            END
        </sql>
        <rollback>
            DROP procedure IF EXISTS `SELECT_TEST_RESULT`;

            #

            CREATE PROCEDURE `SELECT_TEST_RESULT`(
            IN request_project_id VARCHAR(10),
            IN request_id VARCHAR(10),
            IN request_test_id VARCHAR(10),
            IN request_final_result_id VARCHAR(10),
            IN request_test_run_id VARCHAR(10),
            IN request_test_resolution_id VARCHAR(10),
            IN request_debug VARCHAR(1),
            IN request_fail_reason VARCHAR(150),
            In request_limit INT(10)
            )
            BEGIN

            SELECT * FROM test_results as res
            WHERE (
            request_id = '' OR id=request_id)
            AND (request_project_id = '' OR project_id = request_project_id)
            AND (request_test_id = '' OR test_id=request_test_id)
            AND (request_final_result_id = '' OR final_result_id=request_final_result_id)
            AND (request_test_run_id = '' OR test_run_id=request_test_run_id)
            AND (request_test_resolution_id = '' OR test_resolution_id=request_test_resolution_id)
            AND (request_debug = '' OR debug=request_debug)
            AND (request_fail_reason = '' OR INSTR(fail_reason, request_fail_reason) > 0)
            ORDER BY start_date DESC
            LIMIT request_limit
            ;
            END
        </rollback>
    </changeSet>
</databaseChangeLog>