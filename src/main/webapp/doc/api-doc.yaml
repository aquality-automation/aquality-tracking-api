---
openapi: 3.0.0

info:
  description: |
    Documentation for Aquality Tracker API.
    To Authorize you can use API token that you can create in Aquality Tracking Administration
    - As user name you should use `project:{your project id}`
    - As password you should use API token
  version: '0.3.10'
  title: 'Aquality Tracking - API documentation'

servers:
  - url: 'http://localhost:8080/api'
  - url: 'http://localhost:8888/api'
  - url: '{customURL}/api'
    variables:
      customURL:
       default: 'http://localhost:8080'

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

security:
  - BasicAuth: []

tags:
  - name: 'public'
    description: 'Public API to simplify results import'
  - name: 'stats'
    description: 'Overal statistic info'
  - name: 'import'
    description: 'Import operations'
  - name: 'suite'
    description: 'Operations with Test Suites'
  - name: 'milestone'
    description: 'Operations with Milestones'
  - name: 'testrun'
    description: 'Operations with Test Runs'
  - name: 'testresult'
    description: 'Operations with Test Results'
  - name: 'final_result'
    description: 'Operations with Final Results'
  - name: 'result_resolution'
    description: 'Operations with Result Resolutions'
  - name: 'test'
    description: 'Operations with Tests'
  - name: 'project'
    description: 'Operations with Projects'
  - name: 'users'
    description: 'Operations with Users'
  - name: 'settings'
    description: 'Operations with Settings'
  - name: 'authInfo'
    description: 'Get Auth info'
  - name: 'audit'
    description: 'Operations with audits'

paths:
  /public/suite/create-or-update:
    post:
      security:
        - BasicAuth: []
      tags:
        - 'public'
      summary: 'Create OR Update Suite'
      description: "Create suite if it does not exist with specified `name` OR update it if `id` is specified"
      produces:
        - 'application/json'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                project_id:
                  type: integer
                  example: 1
              required:
                - project_id
      responses:
        200:
          description: 'Test Suite was created/updated (ID of created/updated Test Suite is in the `id` header).'
          content:
            application/json:
              schema:
                $ref: '#/definitions/TestSuite'
        400:
          description: 'You have missed one of required parameters you should specify `project_id` AND (`name` AND/OR `id`)'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        401:
          description: "You've missed your authorization header!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        403:
          description: "You have no permissions for selected project!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
  /public/test/create-or-update:
    post:
      security:
        - BasicAuth: []
      tags:
        - 'public'
      summary: 'Create OR Update Test'
      description: |
        Create Test if it does not exist with specified `name` OR `id`. Update test if `id` is specified and it is exists.
        This test will be automatically added to specified Suite.
        For `suites` array you need to add one object with id property the same as `test_suite_id`.
      produces:
        - 'application/json'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                project_id:
                  type: integer
                  example: 1
                suites:
                  type: array
                  items:
                    $ref: '#/definitions/TestSuite'
              required:
                - project_id
                - test_suite_id
                - suites
      responses:
        200:
          description: 'Test Suite was created/updated. The Test JSON will be returned in body'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Test'
        400:
          description: 'You have missed one of required parameters you should specify `project_id` AND (`name` AND/OR `id`) AND `suites`'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        401:
          description: "You've missed your authorization header!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        403:
          description: "You have no permissions for selected project!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
  /public/testrun/start:
    post:
      security:
        - BasicAuth: []
      tags:
        - 'public'
      summary: 'Start test run'
      description: |
        Create Test run for specified `test_suite_id` and `project_id`.
      produces:
        - 'application/json'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                build_name:
                  type: string
                  example: "build_123"
                milestone_id:
                  type: integer
                test_suite_id:
                  type: integer
                  example: 51
                project_id:
                  type: integer
                  example: 8
                execution_environment:
                  type: string
                start_time:
                  type: string
                finish_time:
                  type: string
                author:
                  type: string
                debug:
                  type: integer
                ci_build:
                  type: string
              required:
                - build_name
                - project_id
                - test_suite_id
      responses:
        200:
          description: 'Test Run was created and Started. The Test JSON will be returned in body'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Test'
        400:
          description: 'You have missed one of required parameters you should specify `project_id` AND `build_name` AND `test_suite_id`'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        401:
          description: "You've missed your authorization header!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        403:
          description: "You have no permissions for selected project!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
  /public/testrun/finish:
    get:
      security:
        - BasicAuth: []
      tags:
        - 'public'
      summary: 'Finish test run'
      description: |
        Finish Test run for specified `id` and `project_id`.
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: project_id
          description: 'ID of Project to finish Test Run'
          type: integer
          required: true
        - in: query
          name: id
          description: 'ID of Test Run to finish'
          type: integer
          required: true
      responses:
        200:
          description: 'Test Suite was finished. The Test JSON will be returned in body'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Test'
        400:
          description: 'You have missed one of required parameters you should specify `project_id` AND `id`'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        401:
          description: "You've missed your authorization header!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        403:
          description: "You have no permissions for selected project!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
  /public/test/result/start:
    get:
      security:
        - BasicAuth: []
      tags:
        - 'public'
      summary: 'Start test result'
      description: |
        Start Test Result for specified `test_id`, `test_run_id` and `project_id`.
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: test_id
          description: 'ID of Test Result to Start'
          type: integer
          required: true
        - in: query
          name: test_run_id
          description: 'ID of Test Run to Start test result'
          type: integer
          required: true
        - in: query
          name: project_id
          description: 'ID of Test Result Project'
          type: integer
          required: true
      responses:
        200:
          description: 'Test Result was started. The Test Result JSON will be returned in body'
          content:
            application/json:
              schema:
                $ref: '#/definitions/TestResult'
        400:
          description: 'You have missed one of required parameters you should specify `project_id` AND `test_id` AND `test_run_id`'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        401:
          description: "You've missed your authorization header!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        403:
          description: "You have no permissions for selected project!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
  /public/test/result/finish:
    post:
      security:
        - BasicAuth: []
      tags:
        - 'public'
      summary: 'Finish test result'
      description: |
        Finish Test result for specified `id` and `project_id`.
        You should specify 'final_result_id' - Failed: 1, Passed: 2, Not Executed: 3, Pending: 5.
      produces:
        - 'application/json'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 123
                  description: 'ID of Test Result'
                project_id:
                  type: integer
                  description: 'ID of Test Result Project'
                final_result_id:
                  type: integer
                  example: 51
                  description: 'ID of Final Result - Failed: 1, Passed: 2, Not Executed: 3, Pending: 5'
                fail_reason:
                  type: string
                  example: "Error message"
                  description: 'Fail reason message'
              required:
                - id
                - project_id
                - final_result_id
      responses:
        200:
          description: 'Test result was finished. The Test JSON will be returned in body'
          content:
            application/json:
              schema:
                $ref: '#/definitions/TestResult'
        400:
          description: 'You have missed one of required parameters you should specify `project_id` AND `id` AND `final_result_id`'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        401:
          description: "You've missed your authorization header!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        403:
          description: "You have no permissions for selected project!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'

  /stats/testrun:
    get:
      tags:
        - 'stats'
      summary: 'Get Test Runs statistic'
      description: 'Test Runs statistic information'
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: 'Test Run ID - will return stats for one specific test run'
        - in: query
          name: test_suite_id
          schema:
            type: integer
          description: 'Suite ID - will return stats for one specific suite'
        - in: query
          name: project_id
          required: true
          schema:
            type: integer
          description: 'Project ID'
        - in: query
          name: debug
          schema:
            type: integer
          description: '1 - Only debug test runs, 0 - Only non debug test runs'
      responses:
        200:
          description: 'Test Runs statistic'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/TestRunStatistic'
        400:
          description: 'You have missed one of required parameters you should specify `project_id`'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        401:
          description: "You've missed your authorization header!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        403:
          description: "You have no permissions for selected project!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
  /stats/testresult:
    get:
      tags:
        - 'stats'
      summary: 'Get Test Results statistic'
      description: 'Test Results statistic information'
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: project_id
          required: true
          schema:
            type: integer
          description: 'Project ID'
        - in: query
          name: testRunStartedFrom
          schema:
            type: string
          description: 'Date string. e.g. 2020-03-06T21:00:00.000Z'
        - in: query
          name: testRunStartedTo
          schema:
            type: string
          description: 'Date string. e.g. 2020-03-06T21:00:00.000Z'
      responses:
        200:
          description: 'Test Results statistic'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/TestResultStatistic'
        400:
          description: 'You have missed one of required parameters you should specify `project_id`'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        401:
          description: "You've missed your authorization header!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        403:
          description: "You have no permissions for selected project!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
  /stats/suite:
    get:
      tags:
        - 'stats'
      summary: 'Get Test Suite statistic'
      description: 'Test Suites statistic information'
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: project_id
          required: true
          schema:
            type: integer
          description: 'Project ID'
        - in: query
          name: suiteId
          schema:
            type: integer
          description: 'Suite ID'
      responses:
        200:
          description: 'Test Suites statistic'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/TestSuiteStatistic'
        400:
          description: 'You have missed one of required parameters you should specify `project_id`'
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        401:
          description: "You've missed your authorization header!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
        403:
          description: "You have no permissions for selected project!"
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'

  /import:
    post:
      tags:
        - 'import'
      summary: 'Import Test Run'
      description: |
        Import Test Run from file. Following formats are supported:
        - MSTest
        - Robot
        - TestNG
        - Cucumber
        - PHPCodeception
        - NUnit_v2
        - NUnit_v3
      consumes:
        - 'multipart/form-data'
      parameters:
        - in: query
          name: projectId
          description: 'ID of Project to import Test Run'
          schema:
            type: integer
          required: true
        - in: query
          name: format
          description: 'Format of the file for import'
          schema:
            type: string
          required: true
          enum: ['MSTest', 'Robot', 'TestNG', 'Cucumber', 'PHPCodeception', 'NUnit_v2', 'NUnit_v3']
        - in: formData
          name: uploadFile0
          description: 'File for import'
          schema:
            type: file
          required: true
        - in: query
          name: singleTestRun
          description: 'true/false - Import all files into single Test Run (default = false)'
          schema:
            type: strings
        - in: query
          name: suite
          description: 'Test Suite name (required only when format = MSTest and singleTestRun = true)'
          schema:
            type: string
        - in: query
          name: environment
          description: 'Environment used for Test Run'
          schema:
            type: string
        - in: query
          name: pattern
          description: 'Regular expression pattern to identify if test was created before by matches in body (useful to match tests by TestRail ID, for example)'
          schema:
            type: string
        - in: query
          name: buildName
          description: 'Build name (required only when singleTestRun = true)'
          schema:
            type: string
        - in: query
          name: author
          description: 'Author name (required only when singleTestRun = true)'
          schema:
            type: string
        - in: query
          name: cilink
          description: 'Link to CI Build'
          schema:
            type: string
        - in: query
          name: testRunId
          description: 'ID of testrun that should be updated with results from import file'
          schema:
            type: string
        - in: query
          name: testNameKey
          description: 'Select the node of test name (required for MSTest and TestNG)'
          schema:
            type: string
          enum: ['className', 'testName', 'descriptionNode']
      responses:
        200:
          description: 'Valid response'
  /import/results:
    get:
      tags:
        - 'import'
      summary: 'Get Import Results'
      description: 'Get Results of imports'
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: projectId
          description: 'Id of project'
          schema:
            type: integer
      responses:
        200:
          description: 'Valid response'
          schema:
            $ref: '#definitions/ImportDto'
  /final_result:
    get:
      tags:
        - 'final_result'
      summary: 'Get Final Results'
      description: 'Get list of available Final Results for Test in the system'
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: id
          schema:
            type: integer
        - in: query
          name: name
          schema:
            type: string
        - in: color
          name: id
          schema:
            type: integer
      responses:
        200:
          description: 'Valid response'
          schema:
            $ref: '#definitions/FinalResult'
          examples:
            application/json: |
              [
                {
                  "color": 1,
                  "name": "Failed",
                  "id": 1
                },
                {
                  "color": 5,
                  "name": "Passed",
                  "id": 2
                },
                {
                  "color": 3,
                  "name": "Not Executed",
                  "id": 3
                },
                {
                  "color": 2,
                  "name": "In Progress",
                  "id": 4
                },
                {
                  "color": 4,
                  "name": "Pending",
                  "id": 5
                }
              ]
  /milestone:
    get:
      tags:
        - 'milestone'
      summary: 'Get Milestones'
      description: "Get list of available Milestones"
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: id
          schema:
            type: integer
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: project_id
          schema:
            type: integer
      responses:
        200:
          description: 'Valid response'
          schema:
            $ref: '#definitions/Milestone'
          examples:
            application/json: |
              [
                {
                  "project_id": 1,
                  "name": "Demo Milestone",
                  "id": 1
                }
              ]
    post:
      tags:
        - 'milestone'
      summary: 'Create or update Milestone'
      description: "Create or update Milestone using given data"
      consumes:
        - 'application/json'
      parameters:
        - in: body
          name: data
          description: 'JSON with Milestone data'
          schema:
            schema:
              type: object
            properties:
              id:
                schema:
                  type: integer
              name:
                schema:
                  type: string
              project_id:
                schema:
                  type: integer
                description: 'ID of Project associated with Milestone'
      responses:
        200:
          description: 'Milestone was created/updated (ID of created/updated milestone is in the "id" header).'
    delete:
      tags:
        - 'milestone'
      summary: 'Remove Milestone'
      description: "Remove Milestone by ID"
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: 'Milestone was removed'
  /project:
    get:
      tags:
        - 'project'
      summary: 'Get Projects'
      description: "Get list of Projects available for User"
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: id
          schema:
            type: integer
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: customer_id
          schema:
            type: integer
          description: 'Get Customers projects'
        - in: query
          name: user_id
          schema:
            type: integer
          description: 'Get users projects'
      responses:
        200:
          description: 'Valid response'
          schema:
            $ref: '#definitions/Project'
          examples:
            application/json: |
              [
                {
                  "name": "Demo Project",
                  "id": 1
                }
              ]
    post:
      tags:
        - 'project'
      summary: 'Create or update Project'
      description: "Create or update Project using given data"
      consumes:
        - 'application/json'
      parameters:
        - in: body
          name: data
          description: 'JSON with project data'
          schema:
            schema:
              type: object
            properties:
              id:
                schema:
                  type: integer
              name:
                schema:
                  type: string
      responses:
        200:
          description: 'Project was created/updated (ID of created/updated project is in the "id" header).'
        409:
          description: 'Project was not created! Probably this name already in use.'
        403:
          description: 'Project was not created! Unknown error.'
    delete:
      tags:
        - 'project'
      summary: 'Remove Project'
      description: "Remove Project by ID"
      parameters:
        - in: query
          name: projectId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: 'Project was removed'
  /result_resolution:
    get:
      tags:
        - 'result_resolution'
      summary: 'Get Result Resolutions'
      description: 'Get list of all Result Resolutions in the system'
      parameters:
        - in: query
          name: projectId
          description: 'Get resolutions available only for project with given `projectId`'
          schema:
            type: integer
      produces:
        - 'application/json'
      responses:
        200:
          description: 'Valid response'
          schema:
            schema:
              type: array
            items:
              $ref: '#definitions/ResultResolution'
          examples:
            application/json: |
              [
                {
                  "color": 3,
                  "name": "Not Assigned",
                  "id": 1
                },
                {
                  "color": 1,
                  "name": "Application Issue",
                  "id": 2
                },
                {
                  "color": 2,
                  "name": "Environment Issue",
                  "id": 3
                },
                {
                  "color": 2,
                  "name": "Test Issue",
                  "id": 4
                },
                {
                  "color": 2,
                  "name": "Test Design Issue",
                  "id": 5
                },
                {
                  "color": 1,
                  "project_id": 1,
                  "name": "Demo resolution",
                  "id": 6
                }
              ]
    post:
      tags:
        - 'result_resolution'
      summary: 'Create or modify Result Resolution'
      description: 'Create new Result Resolution or modify existing'
      produces:
        - 'application/json'
      parameters:
        - in: body
          name: data
          description: 'JSON with Result Resolution data'
          schema:
            schema:
              type: object
            properties:
              id:
                schema:
                  type: integer
              name:
                schema:
                  type: string
              color:
                schema:
                  type: integer
              project_id:
                schema:
                  type: integer
      responses:
        200:
          description: 'Result Resolution was created/updated'
    delete:
      tags:
        - 'result_resolution'
      summary: 'Remove Result Resolution'
      description: 'Remove existing Result Resolution'
      parameters:
        - in: query
          name: id
          description: 'ID of the Result Resolution for removal'
          schema:
            type: integer
          required: true
        - in: query
          name: projectId
          description: 'ID of the Project holding Result Resolution'
          schema:
            type: integer
          required: true
      responses:
        200:
          description: 'Result Resolution was removed'
  /suite:
    get:
      tags:
        - 'suite'
      summary: 'Get Test Suites'
      description: "Get list of Test Suites by search criteria"
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: withChildren
          description: '1/0 - Flag for including Suite Tests in the response'
          schema:
            type: integer
        - in: query
          name: id
          schema:
            type: integer
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: project_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Valid response'
          schema:
            $ref: '#definitions/TestSuite'
          examples:
            application/json: |
              [
                {
                  "project_id": 1,
                  "name": "All Tests",
                  "id": 1
                }
              ]
            application/json (withChildren = 1): |
              [
                {
                  "project_id": 1,
                  "name": "All tests",
                  "id": 1,
                  "tests": [
                    {
                      "test_suite_id": 3,
                      "manual_duration": null,
                      "project_id": 1,
                      "name": "Neutral Loss Search - Tolerance field does not allow entry of invalid numeric values",
                      "developer": null,
                      "id": 5,
                      "body": null,
                      "results": [
                        {
                          "test_run_id": 3,
                          "debug": 0,
                          "test": {
                            "test_suite_id": 3,
                            "manual_duration": null,
                            "project_id": 1,
                            "name": "Neutral Loss Search - Tolerance field does not allow entry of invalid numeric values",
                            "developer": null,
                            "id": 5,
                            "body": null,
                            "results": null
                          },
                          "log": null,
                          "final_result": {
                            "color": 1,
                            "name": "Failed",
                            "id": 1
                          },
                          "project_id": 1,
                          "finish_date": 1514316018000,
                          "assigned_user": null,
                          "comment": null,
                          "id": 5,
                          "fail_reason": "TestCleanup method ... threw exception...",
                          "updated": 1514456869000,
                          "test_resolution": {
                            "color": 3,
                            "project_id": null,
                            "name": "Not Assigned",
                            "id": 1
                          },
                          "final_result_updated": 1514316018000,
                          "start_date": 1514315810000
                        }
                      ]
                    }
                  ]
                }
              ]
    post:
      tags:
        - 'testsuite'
      summary: 'Create or update Test Suite'
      description: "Create or update Test Suite using given data"
      consumes:
        - 'application/json'
      parameters:
        - in: body
          name: data
          description: 'JSON with Test Suite data'
          schema:
            schema:
              type: object
            properties:
              id:
                schema:
                  type: integer
              name:
                schema:
                  type: string
              project_id:
                schema:
                  type: integer
      responses:
        200:
          description: 'Test Suite was created/updated (ID of created/updated Test Suite is in the "id" header).'
    delete:
      tags:
        - 'testsuite'
      summary: 'Remove Test Suite'
      description: "Remove Test Suite by ID"
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: 'Test Suite was removed'
  /test:
    get:
      tags:
        - 'test'
      summary: 'Get Tests'
      description: "Get list of Tests by search criteria"
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: withChildren
          description: '1/0 - Flag for including test results in the response'
          schema:
            type: integer
        - in: query
          name: id
          schema:
            type: integer
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: body
          schema:
            type: string
        - in: query
          name: test_suite_id
          schema:
            type: integer
        - in: query
          name: project_id
          schema:
            type: integer
        - in: query
          name: developer_id
          schema:
            type: integer
      responses:
        200:
          description: 'Valid response'
          schema:
            schema:
              type: array
            items:
              $ref: '#definitions/Test'
          examples:
            application/json: |
              [
                {
                  "manual_duration": null,
                  "project_id": 1,
                  "name": "Demo test 1",
                  "developer": null,
                  "id": 1,
                  "body": null
                }
              ]
            application/json (withChildren = 1): |
              [
                {
                  "manual_duration": null,
                  "project_id": 1,
                  "name": "Demo test 1",
                  "developer": null,
                  "id": 1,
                  "body": null,
                  "results": [
                    {
                      "test_run_id": 1,
                      "debug": 0,
                      "test": {
                        "test_suite_id": 1,
                        "manual_duration": null,
                        "project_id": 1,
                        "name": "Demo test 1",
                        "developer": null,
                        "id": 1,
                        "body": null,
                        "results": null
                      },
                      "log": "Test log...",
                      "final_result": {
                        "color": 1,
                        "name": "Failed",
                        "id": 1
                      },
                      "project_id": 1,
                      "finish_date": 1512086461000,
                      "assigned_user": {
                        "viewer": 1,
                        "manager": 1,
                        "project_id": 1,
                        "admin": 1,
                        "user": {
                          "manager": 1,
                          "pass": "e10adc3949ba59abbe56e057f20f883e",
                          "user_name": "p.parker",
                          "session_code": null,
                          "second_name": "parker",
                          "admin": 1,
                          "session_created": null,
                          "id": 1,
                          "first_name": "peter",
                          "updated": null
                        },
                        "engineer": 1
                      },
                      "comment": "Test result comment",
                      "id": 1,
                      "fail_reason": "1",
                      "updated": null,
                      "test_resolution": {
                        "color": 3,
                        "project_id": null,
                        "name": "Not Assigned",
                        "id": 1
                      },
                      "final_result_updated": null,
                      "start_date": 1512086401000
                    }
                  ]
                }
              ]
    post:
      tags:
        - 'test'
      summary: 'Create or update Test'
      description: "Create or update Test using given data"
      consumes:
        - 'application/json'
      parameters:
        - in: body
          name: data
          description: 'JSON with Test data'
          schema:
            schema:
              type: object
            properties:
              name:
                schema:
                  type: string
              body:
                schema:
                  type: string
              project_id:
                schema:
                  type: integer
              manual_duration:
                schema:
                  type: string
              developer:
                schema:
                  type: integer
              suites:
                schema:
                  type: object
                description: 'Add test to only these suites'
      responses:
        200:
          description: 'Test was created/updated (ID of created/updated Test is in the "id" header).'
    delete:
      tags:
        - 'test'
      summary: 'Remove Test'
      description: "Remove Test by ID"
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: 'Test was removed'
  /testresult:
    get:
      tags:
        - 'testresult'
      summary: 'Get Test Results'
      description: "Get list of Test Results by search criteria"
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: project_id
          schema:
            type: integer
        - in: query
          name: id
          schema:
            type: integer
        - in: query
          name: test_id
          schema:
            type: integer
        - in: query
          name: final_result_id
          schema:
            type: integer
        - in: query
          name: test_run_id
          schema:
            type: integer
        - in: query
          name: debug
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
          description: 'Limit results set'
      responses:
        200:
          description: 'Valid response'
          schema:
            $ref: '#definitions/TestResult'
          examples:
            application/json: |
              [
                {
                  "test_run_id": 1,
                  "debug": 0,
                  "test": {
                    "test_suite_id": 1,
                    "manual_duration": null,
                    "project_id": 1,
                    "name": "Demo test 1",
                    "developer": null,
                    "id": 1,
                    "body": null,
                    "results": null
                  },
                  "log": "Test log...",
                  "final_result": {
                    "color": 1,
                    "name": "Failed",
                    "id": 1
                  },
                  "project_id": 1,
                  "finish_date": 1512086461000,
                  "assigned_user": {
                    "viewer": 1,
                    "manager": 1,
                    "project_id": 1,
                    "admin": 1,
                    "user": {
                      "manager": 1,
                      "pass": "e10adc3949ba59abbe56e057f20f883e",
                      "user_name": "p.parker",
                      "session_code": null,
                      "second_name": "parker",
                      "admin": 1,
                      "session_created": null,
                      "id": 1,
                      "first_name": "peter",
                      "updated": null
                    },
                    "engineer": 1
                  },
                  "comment": "Test result comment",
                  "id": 1,
                  "fail_reason": "1",
                  "updated": null,
                  "test_resolution": {
                    "color": 3,
                    "project_id": null,
                    "name": "Not Assigned",
                    "id": 1
                  },
                  "final_result_updated": null,
                  "start_date": 1512086401000
                }
              ]
    post:
      tags:
        - 'testresult'
      summary: 'Create or update Test Result'
      description: "Create or update Test Result using given data"
      consumes:
        - 'application/json'
      parameters:
        - in: body
          name: data
          description: 'JSON with Test Result data'
          schema:
            schema:
              type: object
            properties:
              id:
                schema:
                  type: integer
              project_id:
                schema:
                  type: integer
                description: 'ID of related Project'
              test_id:
                schema:
                  type: integer
                description: 'Related test id'
              final_result_id:
                schema:
                  type: integer
                description: 'Final Result assigned after investigation. Option from table `final_results`'
              comment:
                schema:
                  type: string
                description: 'Comment regarding Test Result'
              test_run_id:
                schema:
                  type: integer
                description: 'ID of related Test Run'
              test_resolution_id:
                schema:
                  type: integer
                description: 'Test resolution (reason why test failed). Option from table `result_resolution`'
              debug:
                schema:
                  type: integer
                description: 'Debug flag'
              updated:
                schema:
                  type: string
                description: 'Test Result last update date (format: yyyy-MM-dd HH:mm:ss)'
              log:
                schema:
                  type: string
                description: 'Log of the Test'
              start_date:
                schema:
                  type: string
                description: 'Test start date (format: yyyy-MM-dd HH:mm:ss)'
              finish_date:
                schema:
                  type: string
                description: 'Test finish date (format: yyyy-MM-dd HH:mm:ss)'
              final_result_updated:
                schema:
                  type: string
                description: 'Test Final Result last update date (format: yyyy-MM-dd HH:mm:ss)'
              fail_reason:
                schema:
                  type: string
                description: 'Description of the fail reason'
              assignee:
                schema:
                  type: integer
                description: 'User assigned to investigate Test Result'
      responses:
        200:
          description: 'Test Result was created/updated'
    delete:
      tags:
        - 'testresult'
      summary: 'Remove Test Result'
      description: "Remove Test Run by ID"
      parameters:
        - in: query
          name: id
          description: 'ID of the Test Result for removal'
          schema:
            type: integer
          required: true
      responses:
        200:
          description: 'Test Result was removed'
  /testrun:
    get:
      tags:
        - 'testrun'
      summary: 'Get Test Runs'
      description: "Get list of Test Runs by search criteria"
      produces:
        - 'application/json'
      parameters:
        - in: query
          name: withChildren
          description: '1/0 - Flag for including test details in the response'
          schema:
            type: integer
        - in: query
          name: id
          schema:
            type: integer
        - in: query
          name: build_name
          schema:
            type: string
        - in: query
          name: milestone_id
          schema:
            type: integer
        - in: query
          name: test_suite_id
          schema:
            type: integer
        - in: query
          name: project_id
          schema:
            type: integer
        - in: query
          name: execution_environment
          schema:
            type: integer
        - in: query
          name: debug
          schema:
            type: integer
        - in: query
          name: label_id
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        200:
          description: 'Valid response'
          schema:
            $ref: '#definitions/TestRun'
          examples:
            application/json: |
              [
                {
                  "start_time": "2017-12-01 00:00:01.0",
                  "test_suite_id": 1,
                  "debug": 0,
                  "project_id": 1,
                  "author": "Peter",
                  "milestone_id": 1,
                  "milestone_name": "Demo Milestone",
                  "execution_environment": "Staging",
                  "id": 1,
                  "testsuite_name": "All tests",
                  "finish_time": "2017-12-01 01:00:01.0",
                  "build_name": "Demo build"
                }
              ]
            application/json (withChildren = 1): |
              [
                {
                  "start_time": "2017-12-01 00:00:01.0",
                  "test_suite_id": 1,
                  "debug": 0,
                  "project_id": 1,
                  "author": "Peter",
                  "milestone_id": 1,
                  "milestone_name": "Demo Milestone",
                  "execution_environment": "Staging",
                  "id": 1,
                  "testsuite_name": "All tests",
                  "finish_time": "2017-12-01 01:00:01.0",
                  "build_name": "Demo build",
                  "testResults": [
                    {
                      "test_run_id": 1,
                      "debug": 0,
                      "test": {
                        "test_suite_id": 1,
                        "manual_duration": null,
                        "project_id": 1,
                        "name": "Demo test 2",
                        "developer": null,
                        "id": 2,
                        "body": null,
                        "results": null
                      },
                      "log": "Test log...",
                      "final_result": {
                        "color": 5,
                        "name": "Passed",
                        "id": 2
                      },
                      "project_id": 1,
                      "finish_date": 1512086521000,
                      "assigned_user": {
                        "viewer": 1,
                        "manager": 1,
                        "project_id": 1,
                        "admin": 1,
                        "user": {
                          "manager": 1,
                          "pass": "e10adc3949ba59abbe56e057f20f883e",
                          "user_name": "p.parker",
                          "session_code": null,
                          "second_name": "parker",
                          "admin": 1,
                          "session_created": null,
                          "id": 1,
                          "first_name": "peter",
                          "updated": null
                        },
                        "engineer": 1
                      },
                      "comment": "Test result comment",
                      "id": 2,
                      "fail_reason": "1",
                      "updated": null,
                      "test_resolution": {
                        "color": 1,
                        "project_id": null,
                        "name": "Application Issue",
                        "id": 2
                      },
                      "final_result_updated": null,
                      "start_date": 1512086461000
                    }
                  ]
                }
              ]
    post:
      tags:
        - 'testrun'
      summary: 'Create or update Test Run'
      description: "Create or update Test Run using given data"
      consumes:
        - 'application/json'
      parameters:
        - in: body
          name: data
          description: 'JSON with Test Run data'
          schema:
            schema:
              type: object
            properties:
              id:
                schema:
                  type: integer
              build_name:
                schema:
                  type: string
                description: 'Build name'
              start_time:
                schema:
                  type: string
                description: 'Test run start time (format: yyyy-MM-dd HH:mm:ss)'
              milestone_id:
                schema:
                  type: integer
                description: 'ID of related Milestone'
              test_suite_id:
                schema:
                  type: integer
                description: 'ID of related Test Suite'
              project_id:
                schema:
                  type: integer
                description: 'ID of Project'
              execution_environment:
                schema:
                  type: string
                description: 'Execution environment name'
              finish_time:
                schema:
                  type: string
                description: 'Test run end time (format: yyyy-MM-dd HH:mm:ss)'
              author:
                schema:
                  type: string
                description: 'Person started test run'
              debug:
                schema:
                  type: integer
                description: 'Debug flag'
      responses:
        200:
          description: 'Test Run was created/updated (ID of created/updated Test Run is in the "id" header).'
    delete:
      tags:
        - 'testrun'
      summary: 'Remove Test Run'
      description: "Remove Test Run by ID"
      parameters:
        - in: query
          name: id
          description: 'ID of the Test Run for removal'
          schema:
            type: integer
          required: true
      responses:
        200:
          description: 'Test Run was removed'
  /users:
    get:
      parameters:
        - in: query
          name: id
          schema:
            type: integer
        - in: query
          name: first_name
          schema:
            type: string
        - in: query
          name: second_name
          schema:
            type: string
        - in: query
          name: user_name
          schema:
            type: string
        - in: query
          name: auditor
          schema:
            type: integer
        - in: query
          name: unit_coordinator
          schema:
            type: integer
        - in: query
          name: account_manager
          schema:
            type: integer
      tags:
        - 'users'
      summary: 'Get Users'
      description: 'Get list of all Users in the system that match requested parameters'
      produces:
        - 'application/json'
      responses:
        200:
          description: 'Valid response'
          schema:
            schema:
              type: array
            items:
              $ref: '#definitions/User'
          examples:
            application/json: |
              [
                {
                  "manager": 1,
                  "user_name": "p.parker",
                  "second_name": "parker",
                  "admin": 1,
                  "session_created": "2017-12-26 12:03:53.0",
                  "id": 1,
                  "first_name": "peter",
                  "updated": "2017-12-26 12:08:17.0"
                }
              ]
    post:
      tags:
        - 'users'
      summary: 'Create or modify User'
      description: 'Create new user or modify existing'
      produces:
        - 'application/json'
      parameters:
        - in: body
          name: data
          description: 'JSON with user data. If user with given ID already exists, its data will be updated'
          schema:
            schema:
              type: object
            properties:
              id:
                schema:
                  type: integer
              first_name:
                schema:
                  type: string
              second_name:
                schema:
                  type: string
              user_name:
                schema:
                  type: string
              password:
                schema:
                  type: string
              admin:
                schema:
                  type: integer
                decription: "1/0 - user will/won't have 'Admin' role"
              manager:
                schema:
                  type: integer
                decription: "1/0 - user will/won't have 'Manager' role"
              auditor:
                schema:
                  type: integer
                decription: "1/0 - user will/won't have 'auditor' role"
              unit_coordinator:
                schema:
                  type: integer
                decription: "1/0 - user will/won't have 'unit_coordinator' role"
              audit_notifications:
                schema:
                  type: integer
                decription: "1/0 - user will/won't enable audit notifications"
              audit_admin:
                schema:
                  type: integer
                decription: "1/0 - user will/won't have 'audit_admin' role"
              email:
                schema:
                  type: string
              ldap_user:
                schema:
                  type: integer
                decription: "1/0 - user will/won't have 'ldap_user' role"
              head:
                schema:
                  type: integer
                decription: "1/0 - user will/won't have 'auditor' role"
              account_manager:
                schema:
                  type: integer
                decription: "1/0 - user will/won't have 'auditor' role"
      responses:
        200:
          description: 'User was created/updated (ID of created/updated user is in the "id" response header).'
    delete:
      tags:
        - 'users'
      summary: 'Remove User'
      description: 'Remove existing user'
      parameters:
        - in: query
          name: id
          description: 'ID of the User for removal'
          schema:
            type: string
      responses:
        200:
          description: 'User was removed'

definitions:
  Error:
    type: object
    properties:
      message:
        type: string
  FinalResult:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      color:
        type: integer
  Milestone:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      project_id:
        type: integer
  Project:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  TestSuite:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      project_id:
        type: integer
      tests:
        type: array
        description: 'List of Tests in Suite. Optional.'
        items:
          $ref: '#definitions/Test'
  TestRun:
    type: object
    properties:
      id:
        type: integer
      build_name:
        type: string
      milestone_id:
        type: integer
      test_suite_id:
        type: integer
      project_id:
        type: integer
      execution_environment:
        type: string
      start_time:
        type: string
      finish_time:
        type: string
      author:
        type: string
      debug:
        type: integer
      ci_build:
        type: string
      testResults:
        type: array
        description: 'List of Test Results in Suite. Optional.'
        items:
          $ref: '#definitions/TestResult'
  User:
    type: object
    properties:
      id:
        type: integer
      first_name:
        type: string
      second_name:
        type: string
      user_name:
        type: string
      pass:
        type: string
        description: 'MD5 hash of user password'
      updated:
        type: integer
        description: 'Last update date'
      session_code:
        type: string
        description: 'Code of the user session'
      session_created:
        type: string
        description: 'Date of the user session start'
      admin:
        type: string
        description: 'Indication that user has Admin role'
      manager:
        type: string
        description: 'Indication that user has Manager role'
  ProjectUser:
    type: object
    properties:
      user:
        type: object
        $ref: '#definitions/User'
      project_id:
        type: integer
      admin:
        type: integer
      manager:
        type: integer
      engineer:
        type: integer
      viewer:
        type: integer
  ResultResolution:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      color:
        type: integer
      project_id:
        type: integer
  Test:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      body:
        type: string
      test_suite_id:
        type: integer
      project_id:
        type: integer
      manual_duration:
        type: string
      developer:
        type: integer
      results:
        type: array
        description: 'List of Test Results for Test. Optional.'
        items:
          $ref: '#definitions/TestResult'
  ImportDto:
    type: object
    properties:
      id:
        type: integer
      project_id:
        type: integer
        description: 'ID of related Project'
      testrun_id:
        type: integer
        description: 'ID of related Test Run'
      finish_status:
        type: integer
        description: '2 if failed, 1 if success, 0 if in progress'
      started:
        type: string
        description: 'Started (format: yyyy-MM-dd HH:mm:ss)'
      finished:
        type: string
        description: 'Finished (format: yyyy-MM-dd HH:mm:ss)'
      log:
        type: string
        description: 'Logs'
  TestResult:
    type: object
    properties:
      id:
        type: integer
      project_id:
        type: integer
        description: 'ID of related Project'
      test:
        $ref: '#definitions/Test'
      final_result:
        $ref: '#definitions/FinalResult'
      comment:
        type: string
        description: 'Comment regarding Test Result'
      test_run_id:
        type: integer
        description: 'ID of related Test Run'
      test_resolution:
        $ref: '#definitions/ResultResolution'
      debug:
        type: integer
        description: 'Debug flag'
      updated:
        type: string
        description: 'Test Result last update date (format: yyyy-MM-dd HH:mm:ss)'
      log:
        type: string
        description: 'Log of the Test'
      start_date:
        type: string
        description: 'Test start date (format: yyyy-MM-dd HH:mm:ss)'
      finish_date:
        type: string
        description: 'Test finish date (format: yyyy-MM-dd HH:mm:ss)'
      final_result_updated:
        type: string
        description: 'Test Final Result last update date (format: yyyy-MM-dd HH:mm:ss)'
      fail_reason:
        type: string
        description: 'Description of the fail reason'
      assigned_user:
        $ref: '#definitions/ProjectUser'
  TestRunStatistic:
    type: object
    properties:
      id:
        type: integer
        example: 1
        description: 'Test Run ID'
      build_name:
        type: string
        example: 'build_1'
      milestone_id:
        type: integer
        example: 1
      test_suite_id:
        type: integer
        example: 1
      project_id:
        type: integer
        example: 1
      execution_environment:
        type: string
        example: 'Chrome win 10'
      debug:
        type: integer
        example: 1
      start_time:
        type: integer
        description: 'Test Run start time'
        example: 1583491768000
      finish_time:
        type: integer
        description: 'Test Run finish time'
        example: 1583491768000
      passed:
        type: integer
        description: 'Number of passed tests (`final_results` table)'
        example: 1
      failed:
        type: integer
        description: 'Number of failed tests (`final_results` table)'
        example: 1
      not_executed:
        type: integer
        description: 'Number of not executed tests (`final_results` table)'
        example: 1
      in_progress:
        type: integer
        description: 'Number of tests in progress (`final_results` table)'
        example: 1
      pending:
        type: integer
        description: 'Number of pending tests (`final_results` table)'
        example: 1
      total:
        type: integer
        description: 'Total number of tests in Test Run'
        example: 1
      app_issue:
        type: integer
        description: 'Number of tests having "Red" resolution color'
        example: 1
      warning:
        type: integer
        description: 'Number of tests having "Orange" resolution color'
        example: 1
      not_assigned:
        type: integer
        description: 'Number of failed tests "Blue" resolution color'
        example: 1
      other:
        type: integer
        description: 'Number of results with not "Red", "Orange", "Blue" colors'
        example: 1
  TestResultStatistic:
    type: object
    properties:
      test_run_id:
        type: integer
        example: 1
        description: 'Test Run ID'
      test_run_started:
        type: integer
        description: 'Test Run start time'
        example: 1583491768000
      name:
        type: string
        example: 'Test Feature with all results: All passed'
      status:
        type: string
        example: 'Passed'
      resolution:
        type: string
        example: 'Not Assigned'
  TestSuiteStatistic:
    type: object
    properties:
      id:
        type: integer
        example: 1
        description: 'Test ID'
      name:
        type: string
        description: 'Test name'
        example: 'Test Feature with all results: All passed'
      total_runs:
        type: integer
        description: 'Total executions number'
        example: 10
      passed:
        type: integer
        example: 3
        description: 'Total passed number'
      failed:
        type: integer
        example: 7
        description: 'Total failed number'
      app_issue:
        type: integer
        example: 3
        description: 'Total app issues number'
      autotest_issue:
        type: integer
        example: 3
        description: 'Total autotest issues number'
      resolution_na:
        type: integer
        example: 1
        description: 'Total results number with not assigned resolutions'